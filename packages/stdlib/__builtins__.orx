using Bool = ...
""" Represents a boolean type """

using Integer = ...
""" Represents a integer type """

using Float = ...
""" Represents a float type """

using String = ...
""" Represents a string type """

using Type = ...
""" Represents a runtime metatype """


def typeof(value: Any) -> Type:
    """ Returns runtime type of value """


def issubclass(self: Type, other: Type) -> Bool:
    """ Returns True, if `self` is subclass for `other` type  """


def isinstance(value: Any, type: Type) -> Bool:
    """ Returns True, if value is instance of type """
    return issubclass(typeof(value), type)


effect Raise[Ex]:
    """ Represents an effect of exception handling """
    def raise(ex: Ex) -> Nothing: ...


effect Yield[S, I]:
    """ Represents an effect of iterator yielding """
    def yield(elem: I) -> S: ...
