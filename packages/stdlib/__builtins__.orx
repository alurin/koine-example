using any = ...
""" Represents an any type. This type is used as dynamic marker """

using bool = ...
""" Represents a boolean type """

using int = ...
""" Represents a integer type """

using float = ...
""" Represents a float type """

using str = ...
""" Represents a string type """

#using Type = ...
#""" Represents a runtime metatype """


#def typeof(value: any) -> Type:
#    """ Returns runtime type of value """


#def issubclass(self: Type, other: Type) -> bool:
#    """ Returns True, if `self` is subclass for `other` type  """


#def isinstance(value: any, type: Type) -> bool:
#    """ Returns True, if value is instance of type """
#    return issubclass(typeof(value), type)


effect Raise[Ex]:
    """ Represents an effect of exception handling """
    def raise(ex: Ex) -> nothing: ...


effect Yield[I, S]:
    """ Represents an effect of iterator yielding """
    def yield(elem: I) -> S: ...
